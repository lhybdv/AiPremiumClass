import numpy as np
import torch
from torchviz import make_dot

a = [1, 2, 3, 4, 5]
b = np.array(a, np.float128)
print(b)
print("------------------")
a = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)])
print(a)
print("------------------")
m = np.zeros((3, 5, 4), dtype=int)
print(m)
print("------------------")
n = np.ones((2, 3), dtype=float)
print(n)
print("------------------")
n = np.eye(5)
print(n)
a = np.arange(1, 6, 0.1)
print(a)
p = range(5)
print(p)
m = np.random.normal(0, 0.1, 5)
print(m)
print("------------------下一个章节(维度数据的处理和筛选)-----------------")
a = np.array([[1, 2, 3], [3, 4, 3], [5, 6, 8], [5, 6, 8]])
print("ndim:", a.ndim)
print("shape:", a.shape)
print("size:", a.size)
print("dtype:", a.dtype)
print("itemsize:", a.itemsize)
print("data:", a.data)
a = a.flatten()
print(a)
print("------------------下一个章节(数学操作)-----------------")
a = np.ones((2, 2))
b = np.ceil([(-3.3, 6.1), (-1, 7)])
print(a.prod())
print(a.sum())
# b = b.argmax()
print(b)
print("------------------下一个章节(线性代数)-----------------")
a = np.array([[1, 2], [3, 4]])
b = np.array([[5, 6], [7, 8]])
print(np.dot(a, b))
m = a @ b
print(m)
print("------------------下一个章节(开始学习pytorch的知识)-----------------")
print("PyTorch 版本:", torch.__version__)
if torch.cuda.is_available():
    print("CUDA 可用，当前设备:", torch.cuda.get_device_name(0))
else:
    print("CUDA 不可用，将使用 CPU")

tensor = torch.rand(3, 3, 3)
print("随机张量:\n", tensor)

a = torch.tensor([1.0, 2.0, 3.0])
b = torch.tensor([4.0, 5.0, 6.0])
print(a)
shape = (
    2,
    3,
)
rand_tensor = torch.rand(shape)
print(rand_tensor)
ones_tensor = torch.ones(shape)
print(ones_tensor)
zeros_tensor = torch.zeros(shape, dtype=torch.int32)
print(zeros_tensor)
s = torch.linspace(start=1, end=10, steps=20)
print(s)
s = torch.normal(mean=0.0, std=1.0, size=(5, 3))
print(s)
s = torch.eye(3)
print(s)
print("------------------下一个章节(张量的操作)-----------------")
A = torch.randn(10, 10, requires_grad=True)
b = torch.randn(10, requires_grad=True)
c = torch.randn(1, requires_grad=True)
x = torch.randn(10, requires_grad=True)
print(A)
print(b)
print(c)
print(x)
result = torch.matmul(A, x.T) + torch.matmul(b, x) + c
dot = make_dot(result, params={'A': A, 'b': b, 'c': c, 'x': x})
dot.render('expression', format='png', cleanup=True, view=False)
